#services:
#  eclipse-mosquitto:
#    image: 'eclipse-mosquitto:2.0.15'
#    container_name: eclipse-mosquitto
#    restart: ${RESTART_POLICY}
#    volumes:
#      - './conf/mosquitto/:/mosquitto/config'
#      - 'mqtt_eloryks_data:/mosquitto/data'
#      - './log/:/mosquitto/log'
#    ports:
#      - '1883:1883'
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:1883" ]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#    networks:
#      - eloryks-training
#  eloryks-db-postgres:
#    image: 'postgres:16-alpine'
#    container_name: eloryks-db-postgres
#    restart: ${RESTART_POLICY}
#    mem_limit: ${POSTGRES_MEM_LIMIT}
#    mem_reservation: ${POSTGRES_MEM_RESERVATION}
#    # set deployment and security settings
#    command: >-
#      postgres
#      -c max_connections=${POSTGRES_MAX_CONNECTIONS}
#      -c shared_buffers=${POSTGRES_SHARED_BUFFERS}
#      -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE}
#      -c maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM}
#      -c checkpoint_completion_target=${POSTGRES_CHECKPOINT_COMPLETION_TARGET}
#      -c wal_buffers=${POSTGRES_WAL_BUFFERS}
#      -c default_statistics_target=${POSTGRES_DEFAULT_STATISTICS_TARGET}
#      -c work_mem=${POSTGRES_WORK_MEM}
#      -c min_wal_size=${POSTGRES_MIN_WAL_SIZE}
#      -c max_wal_size=${POSTGRES_MAX_WAL_SIZE}
#      -c max_worker_processes=${POSTGRES_MAX_WORKER_PROCESSES}
#      -c max_parallel_workers_per_gather=${POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER}
#      -c max_parallel_workers=${POSTGRES_MAX_PARALLEL_WORKERS}
#      -c max_parallel_maintenance_workers=${POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS}
#      -c logging_collector=on
#      -c log_destination=stderr
#      -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log'
#      -c log_truncate_on_rotation=off
#      -c log_min_messages='warning'
#      -c log_min_error_statement='error'
#      -c log_connections=on
#      -c log_disconnections=on
#      -c log_line_prefix='%m [%p]'
#      -c log_statement=ddl
#    environment:
#      POSTGRES_USER: '${POSTGRES_USER}'
#      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
#      PGDATA: '${POSTGRES_DATA_DIRECTORY}'
#    volumes:
#      - 'db_eloryks_data:${POSTGRES_DATA_DIRECTORY}'
#      - './db/db-init/:/docker-entrypoint-initdb.d/'
#    ports:
#      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
#    healthcheck:
#      test:
#        - CMD-SHELL
#        - pg_isready -U ${POSTGRES_USER}
#      interval: 30s
#      timeout: 30s
#      retries: 3
#    networks:
#      - eloryks-training
#  eloryks-db-pgadmin4:
#    image: 'dpage/pgadmin4:8.6'
#    container_name: eloryks-db-pgadmin4
#    restart: ${RESTART_POLICY}
#    environment:
#      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL}'
#      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD}'
#    volumes:
#      - 'pgadmin_eloryks_data:/var/lib/pgadmin'
#      - './conf/pgadmin/eloryks-server.json:/pgadmin4/servers.json'
#      - './conf/pgadmin/pgpass:/pgadmin4/pgpass'
#    entrypoint:
#      - /bin/sh
#      - '-c'
#      - >-
#        mkdir -pm 700 /var/lib/pgadmin/storage &&
#        mkdir -pm 700 /var/lib/pgadmin/storage/${PGADMIN_EMAIL_USER_DIRECTORY} &&
#        chown -R pgadmin:root /var/lib/pgadmin/storage/${PGADMIN_EMAIL_USER_DIRECTORY} &&
#        cp /pgadmin4/pgpass /var/lib/pgadmin/storage/${PGADMIN_EMAIL_USER_DIRECTORY}/pgpassfile &&
#        chmod 600 /var/lib/pgadmin/storage/${PGADMIN_EMAIL_USER_DIRECTORY}/pgpassfile &&
#        /entrypoint.sh
#    ports:
#      - '${PGADMIN_PORT}:80'
#    depends_on:
#      eloryks-db-postgres:
#        condition: service_healthy
#    networks:
#      - eloryks-training
#  eloryks-backend:
#    build: .
#    image: eloryks-backend:1.0.6
#    container_name: eloryks-backend
#    restart: ${RESTART_POLICY}
#    ports:
#      - '8081:8081'
#    depends_on:
#      eloryks-db-postgres:
#        condition: service_healthy
#    networks:
#      - eloryks-training
#  nginx:
#    image: 'nginx:1.25.5-alpine-slim'
#    container_name: eloryks-demo-nginx
#    restart: ${RESTART_POLICY}
#    volumes:
#      - './conf/nginx-reverse-proxy/nginx.conf:/etc/nginx/nginx.conf'
#      - './conf/nginx-reverse-proxy/conf.d/default.conf:/etc/nginx/conf.d/default.conf'
#    ports:
#      - '${NGINX_PORT}:80'
#    depends_on:
#      eloryks-db-pgadmin4:
#        condition: service_started
#    networks:
#      - eloryks-training
#volumes:
#  db_eloryks_data:
#    name: postgre-db-eloryks-data
#  pgadmin_eloryks_data:
#    name: postgre-pgadmin-eloryks-data
#  mqtt_eloryks_data:
#    name: mqtt-eloryks-data
#networks:
#  eloryks-training:
#    name: eloryks-training
#    driver: bridge
#    driver_opts:
#      com.docker.network.driver.mtu: 1500
